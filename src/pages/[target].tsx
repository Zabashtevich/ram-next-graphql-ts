import { GetStaticPropsResult } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import { useDebouncedCallback } from "use-debounce";

import { CardsList, Search } from "../components";
import { ICharacters } from "../interfaces/characters";
import graphqlClient from "../lib/graphql";
import { GET_HOME_CARDS } from "../graphql";
import { NextRouter, useRouter } from "next/router";

interface ISearchPage {
  items?: ICharacters;
  error?: boolean;
}

export default function SearchPage({ items, error }: ISearchPage) {
  const initialState = items;

  const { query }: NextRouter = useRouter();
  const [value, setValue] = useState("");

  const debounced = useDebouncedCallback((value) => {
    setValue(value);
  }, 1000);

  function searchHandler(e: React.ChangeEvent<HTMLInputElement>): void {
    debounced(e.target.value);
  }

  useEffect(() => {
    if (!value) return;
    async function searchItems() {
      fetch(`/api/search?target=${query.target}`, { method: "POST" })
        .then((data) => data.json())
        .then((items) => items);
    }
    searchItems();
  }, [value, query.target]);

  return (
    <>
      <Head>
        <title>RAM APP</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <button onClick={() => setValue("rick")}>sdfsdfsdf</button>
      <Search onChange={searchHandler} />
    </>
  );
}

export async function getServerSideProps(): Promise<
  GetStaticPropsResult<ISearchPage>
> {
  const { error, data } = await graphqlClient.query<ICharacters>({
    query: GET_HOME_CARDS,
  });

  if (error) {
    return {
      props: {
        error: true,
      },
    };
  } else {
    return {
      props: {
        data,
      },
    };
  }
}
